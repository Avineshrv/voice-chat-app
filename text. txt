import React from 'react';
import ReactDOM from 'react-dom';
import { act, Simulate } from 'react-dom/test-utils'; // Use React's own test utils
import { expect } from 'chai';
import sinon from 'sinon';

// Adjust the import path to your component's location
import PopupContainer from '../components/Common/PopupContainer';

// Mock for the SVG component import
vi.mock('../assets/svg-images/ArrowLeftSVG', () => ({
    default: () => <svg />
}));

describe('PopupContainer Component (with react-dom/test-utils)', () => {
    let container;
    let portalRoot;
    let requiredProps;

    beforeEach(() => {
        // This is the container where we will render our component
        container = document.createElement('div');
        document.body.appendChild(container);
        
        // The portal target for the component
        portalRoot = document.createElement('div');
        portalRoot.setAttribute('id', 'logged-in');
        document.body.appendChild(portalRoot);

        requiredProps = {
            onClose: sinon.spy(),
            onBack: sinon.spy(),
            onStepBack: sinon.spy(),
            title: 'Test Title',
            children: <div>Popup Content</div>,
        };
    });

    afterEach(() => {
        // Unmount the component and clean up the DOM
        act(() => {
            ReactDOM.unmountComponentAtNode(container);
        });
        container.remove();
        container = null;
        portalRoot.remove();
        portalRoot = null;
        document.body.style.overflow = '';
        sinon.restore();
    });

    // ## Test Suite ##

    describe('Core Rendering and Lifecycle', () => {
        it('should render the title and children correctly into the portal', () => {
            act(() => {
                ReactDOM.render(<PopupContainer {...requiredProps} />, container);
            });
            expect(portalRoot.textContent).to.include('Test Title');
            expect(portalRoot.textContent).to.include('Popup Content');
        });

        it('should set body overflow to "hidden" on mount and reset it on unmount', () => {
            expect(document.body.style.overflow).to.equal('');
            act(() => {
                ReactDOM.render(<PopupContainer {...requiredProps} />, container);
            });
            expect(document.body.style.overflow).to.equal('hidden');
            
            act(() => {
                ReactDOM.unmountComponentAtNode(container);
            });
            expect(document.body.style.overflow).to.equal('');
        });
    });

    describe('Prop: showClose', () => {
        it('should show the close button by default and trigger onClose on click + animation', () => {
            act(() => {
                ReactDOM.render(<PopupContainer {...requiredProps} />, container);
            });
            
            const closeButton = portalRoot.querySelector('.popup-container__close');
            const panel = portalRoot.querySelector('.popup-container__panel');
            expect(closeButton).to.exist;

            act(() => {
                Simulate.click(closeButton); // Simulate click event
            });
            
            expect(panel.classList.contains('closing')).to.be.true;
            expect(requiredProps.onClose.called).to.be.false;

            act(() => {
                Simulate.animationEnd(panel); // Simulate animation end event
            });

            expect(requiredProps.onClose.calledOnce).to.be.true;
        });

        it('should hide the close button when showClose is false', () => {
            act(() => {
                ReactDOM.render(<PopupContainer {...requiredProps} showClose={false} />, container);
            });
            const closeButton = portalRoot.querySelector('.popup-container__close');
            expect(closeButton).to.not.exist;
        });
    });
    
    describe('Props: showBack and stepBack', () => {
        it('should not render a back button by default', () => {
             act(() => {
                ReactDOM.render(<PopupContainer {...requiredProps} />, container);
            });
            const backButton = portalRoot.querySelector('.popup-container__back');
            expect(backButton).to.not.exist;
        });

        it('should render back button and trigger onBack when showBack is true', () => {
             act(() => {
                ReactDOM.render(<PopupContainer {...requiredProps} showBack={true} />, container);
            });

            const backButton = portalRoot.querySelector('.popup-container__back');
            const panel = portalRoot.querySelector('.popup-container__panel');
            expect(backButton).to.exist;

            act(() => {
                Simulate.click(backButton);
            });

            expect(panel.classList.contains('backing')).to.be.true;
            expect(requiredProps.onBack.called).to.be.false;
            
            act(() => {
                Simulate.animationEnd(panel);
            });

            expect(requiredProps.onBack.calledOnce).to.be.true;
        });

        it('should render back button and trigger onStepBack when showBack is false and stepBack is true', () => {
            act(() => {
                ReactDOM.render(<PopupContainer {...requiredProps} showBack={false} stepBack={true} />, container);
            });

            const backButton = portalRoot.querySelector('.popup-container__back');
            expect(backButton).to.exist;
            
            act(() => {
                Simulate.click(backButton);
            });

            expect(requiredProps.onStepBack.calledOnce).to.be.true;
            expect(requiredProps.onBack.called).to.be.false;
        });
    });

    describe('Other Props', () => {
        it('should have center-aligned title class by default', () => {
            act(() => {
                ReactDOM.render(<PopupContainer {...requiredProps} />, container);
            });
            const titleElement = portalRoot.querySelector('h2');
            expect(titleElement.classList.contains('popup-container__title--center')).to.be.true;
        });

        it('should have left-aligned title class when titleAlign is "left"', () => {
             act(() => {
                ReactDOM.render(<PopupContainer {...requiredProps} titleAlign="left" />, container);
            });
            const titleElement = portalRoot.querySelector('h2');
            expect(titleElement.classList.contains('popup-container__title--left')).to.be.true;
        });

        it('should add "has-button" class when hasButton is true', () => {
            act(() => {
                ReactDOM.render(<PopupContainer {...requiredProps} hasButton={true} />, container);
            });
            const contentContainer = portalRoot.querySelector('.popup-container__content');
            expect(contentContainer.classList.contains('has-button')).to.be.true;
        });

        it('should apply a custom background style as a CSS variable', () => {
            const customBackground = 'rgb(255, 0, 0)';
            act(() => {
                ReactDOM.render(<PopupContainer {...requiredProps} background={customBackground} />, container);
            });
            const panel = portalRoot.querySelector('.popup-container__panel');
            expect(panel.style.getPropertyValue('--popup-panel-background')).to.equal(customBackground);
        });
    });
});
